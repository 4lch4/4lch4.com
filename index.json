[{"categories":null,"contents":" Doppler Installation This note provides instructions on how to install and initialize an installation of the Doppler CLI utility: NOTE: After you\u0026rsquo;ve installed the CLI utility (on any OS), you must login to your account so you have access to your secrets:\ndoppler login MacOS # Prerequisite. gnupg is required for binary signature verification brew install gnupg # Next, install using brew (use `doppler update` for subsequent updates) brew install dopplerhq/cli/doppler Windows # Scoop is the recommended installation method scoop bucket add doppler https://github.com/DopplerHQ/scoop-doppler.git scoop install doppler # Git Bash is also supported mkdir -p $HOME/bin curl -Ls --tlsv1.2 --proto \u0026#34;=https\u0026#34; --retry 3 https://cli.doppler.com/install.sh | sh -s -- --install-path $HOME/bin Linux (Ubuntu) sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install -y apt-transport-https ca-certificates curl gnupg curl -sLf --retry 3 --tlsv1.2 --proto \u0026#34;=https\u0026#34; \u0026#39;https://packages.doppler.com/public/cli/gpg.DE2A7741A397C129.key\u0026#39; | sudo apt-key add - echo \u0026#34;deb https://packages.doppler.com/public/cli/deb/debian any-version main\u0026#34; | sudo tee /etc/apt/sources.list.d/doppler-cli.list sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install doppler Linux (Alpine) wget -q -t3 \u0026#39;https://packages.doppler.com/public/cli/rsa.8004D9FF50437357.key\u0026#39; -O /etc/apk/keys/cli@doppler-8004D9FF50437357.rsa.pub echo \u0026#39;https://packages.doppler.com/public/cli/alpine/any-version/main\u0026#39; | tee -a /etc/apk/repositories apk add doppler ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/infrastructure/secrets/installation/","summary":"Doppler Installation This note provides instructions on how to install and initialize an installation of the Doppler CLI utility: NOTE: After you\u0026rsquo;ve installed the CLI utility (on any OS), you must login to your account so you have access to your secrets:\ndoppler login MacOS # Prerequisite. gnupg is required for binary signature verification brew install gnupg # Next, install using brew (use `doppler update` for subsequent updates) brew install dopplerhq/cli/doppler Windows # Scoop is the recommended installation method scoop bucket add doppler https://github.","tags":null,"title":"Doppler Installation"},{"categories":null,"contents":" Colorize Console Output Adds special characters to text to print in color in the console (combined with console.log()).\nUse template literals and special characters to add the appropriate color code to the string output. For background colors, add a special character that resets the background color at the end of the string. const colorize \\= (...args) \\=\u0026gt; ({ black: \\`\\\\x1b\\[30m${args.join(\u0026#39; \u0026#39;)}\\`, red: \\`\\\\x1b\\[31m${args.join(\u0026#39; \u0026#39;)}\\`, green: \\`\\\\x1b\\[32m${args.join(\u0026#39; \u0026#39;)}\\`, yellow: \\`\\\\x1b\\[33m${args.join(\u0026#39; \u0026#39;)}\\`, blue: \\`\\\\x1b\\[34m${args.join(\u0026#39; \u0026#39;)}\\`, magenta: \\`\\\\x1b\\[35m${args.join(\u0026#39; \u0026#39;)}\\`, cyan: \\`\\\\x1b\\[36m${args.join(\u0026#39; \u0026#39;)}\\`, white: \\`\\\\x1b\\[37m${args.join(\u0026#39; \u0026#39;)}\\`, bgBlack: \\`\\\\x1b\\[40m${args.join(\u0026#39; \u0026#39;)}\\\\x1b\\[0m\\`, bgRed: \\`\\\\x1b\\[41m${args.join(\u0026#39; \u0026#39;)}\\\\x1b\\[0m\\`, bgGreen: \\`\\\\x1b\\[42m${args.join(\u0026#39; \u0026#39;)}\\\\x1b\\[0m\\`, bgYellow: \\`\\\\x1b\\[43m${args.join(\u0026#39; \u0026#39;)}\\\\x1b\\[0m\\`, bgBlue: \\`\\\\x1b\\[44m${args.join(\u0026#39; \u0026#39;)}\\\\x1b\\[0m\\`, bgMagenta: \\`\\\\x1b\\[45m${args.join(\u0026#39; \u0026#39;)}\\\\x1b\\[0m\\`, bgCyan: \\`\\\\x1b\\[46m${args.join(\u0026#39; \u0026#39;)}\\\\x1b\\[0m\\`, bgWhite: \\`\\\\x1b\\[47m${args.join(\u0026#39; \u0026#39;)}\\\\x1b\\[0m\\` }); console.log(colorize(\u0026#39;foo\u0026#39;).red); // \u0026#39;foo\u0026#39; (red letters) console.log(colorize(\u0026#39;foo\u0026#39;, \u0026#39;bar\u0026#39;).bgBlue); // \u0026#39;foo bar\u0026#39; (blue background) console.log(colorize(colorize(\u0026#39;foo\u0026#39;).yellow, colorize(\u0026#39;foo\u0026#39;).green).bgWhite); // \u0026#39;foo bar\u0026#39; (first word in yellow letters, second word in green letters, white background for both) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/development/node/snippets/color-console/","summary":"Colorize Console Output Adds special characters to text to print in color in the console (combined with console.log()).\nUse template literals and special characters to add the appropriate color code to the string output. For background colors, add a special character that resets the background color at the end of the string. const colorize \\= (...args) \\=\u0026gt; ({ black: \\`\\\\x1b\\[30m${args.join(\u0026#39; \u0026#39;)}\\`, red: \\`\\\\x1b\\[31m${args.join(\u0026#39; \u0026#39;)}\\`, green: \\`\\\\x1b\\[32m${args.join(\u0026#39; \u0026#39;)}\\`, yellow: \\`\\\\x1b\\[33m${args.join(\u0026#39; \u0026#39;)}\\`, blue: \\`\\\\x1b\\[34m${args.","tags":null,"title":"Colorize Console Output"},{"categories":null,"contents":" Colors.ts A helper file with a few functions to make it easier to color console output. export enum Colors { black = \u0026#39;\\x1b[30m\u0026#39;, red = \u0026#39;\\x1b[31m\u0026#39;, green = \u0026#39;\\x1b[32m\u0026#39;, yellow = \u0026#39;\\x1b[33m\u0026#39;, blue = \u0026#39;\\x1b[34m\u0026#39;, magenta = \u0026#39;\\x1b[35m\u0026#39;, cyan = \u0026#39;\\x1b[36m\u0026#39;, white = \u0026#39;\\x1b[37m\u0026#39;, bgBlack = \u0026#39;\\x1b[40m\u0026#39;, bgRed = \u0026#39;\\x1b[41m\u0026#39;, bgGreen = \u0026#39;\\x1b[42m\u0026#39;, bgYellow = \u0026#39;\\x1b[43m\u0026#39;, bgBlue = \u0026#39;\\x1b[44m\u0026#39;, bgMagenta = \u0026#39;\\x1b[45m\u0026#39;, bgCyan = \u0026#39;\\x1b[46m\u0026#39;, bgWhite = \u0026#39;\\x1b[47m\u0026#39; } export const fg = { black: (...args: string[]) =\u0026gt; `${Colors.black}${args.join(\u0026#39; \u0026#39;)}`, red: (...args: string[]) =\u0026gt; `${Colors.red}${args.join(\u0026#39; \u0026#39;)}`, green: (...args: string[]) =\u0026gt; `${Colors.green}${args.join(\u0026#39; \u0026#39;)}`, yellow: (...args: string[]) =\u0026gt; `${Colors.yellow}${args.join(\u0026#39; \u0026#39;)}`, blue: (...args: string[]) =\u0026gt; `${Colors.blue}${args.join(\u0026#39; \u0026#39;)}`, magenta: (...args: string[]) =\u0026gt; `${Colors.magenta}${args.join(\u0026#39; \u0026#39;)}`, cyan: (...args: string[]) =\u0026gt; `${Colors.cyan}${args.join(\u0026#39; \u0026#39;)}`, white: (...args: string[]) =\u0026gt; `${Colors.white}${args.join(\u0026#39; \u0026#39;)}` } export const bg = { black: (...args: string[]) =\u0026gt; `${Colors.bgBlack}${args.join(\u0026#39; \u0026#39;)}\\x1b[0m`, red: (...args: string[]) =\u0026gt; `${Colors.bgRed}${args.join(\u0026#39; \u0026#39;)}\\x1b[0m`, green: (...args: string[]) =\u0026gt; `${Colors.bgGreen}${args.join(\u0026#39; \u0026#39;)}\\x1b[0m`, yellow: (...args: string[]) =\u0026gt; `${Colors.bgYellow}${args.join(\u0026#39; \u0026#39;)}\\x1b[0m`, blue: (...args: string[]) =\u0026gt; `${Colors.bgBlue}${args.join(\u0026#39; \u0026#39;)}\\x1b[0m`, magenta: (...args: string[]) =\u0026gt; `${Colors.bgMagenta}${args.join(\u0026#39; \u0026#39;)}\\x1b[0m`, cyan: (...args: string[]) =\u0026gt; `${Colors.bgCyan}${args.join(\u0026#39; \u0026#39;)}\\x1b[0m`, white: (...args: string[]) =\u0026gt; `${Colors.bgWhite}${args.join(\u0026#39; \u0026#39;)}\\x1b[0m` } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/development/node/snippets/colors.ts/","summary":"Colors.ts A helper file with a few functions to make it easier to color console output. export enum Colors { black = \u0026#39;\\x1b[30m\u0026#39;, red = \u0026#39;\\x1b[31m\u0026#39;, green = \u0026#39;\\x1b[32m\u0026#39;, yellow = \u0026#39;\\x1b[33m\u0026#39;, blue = \u0026#39;\\x1b[34m\u0026#39;, magenta = \u0026#39;\\x1b[35m\u0026#39;, cyan = \u0026#39;\\x1b[36m\u0026#39;, white = \u0026#39;\\x1b[37m\u0026#39;, bgBlack = \u0026#39;\\x1b[40m\u0026#39;, bgRed = \u0026#39;\\x1b[41m\u0026#39;, bgGreen = \u0026#39;\\x1b[42m\u0026#39;, bgYellow = \u0026#39;\\x1b[43m\u0026#39;, bgBlue = \u0026#39;\\x1b[44m\u0026#39;, bgMagenta = \u0026#39;\\x1b[45m\u0026#39;, bgCyan = \u0026#39;\\x1b[46m\u0026#39;, bgWhite = \u0026#39;\\x1b[47m\u0026#39; } export const fg = { black: (.","tags":null,"title":"Colors.ts"},{"categories":null,"contents":" Create Directory if not Found Creates a directory, if it does not exist.\nUse fs.existsSync() to check if the directory exists, fs.mkdirSync() to create it.\nconst fs = require(\u0026#39;fs\u0026#39;) const createDirIfNotExists = dir =\u0026gt; !fs.existsSync(dir) ? fs.mkdirSync(dir) : undefined createDirIfNotExists(\u0026#39;test\u0026#39;) // creates the directory \u0026#39;test\u0026#39;, if it doesn\u0026#39;t exist import { existsSync, mkdirSync } from \u0026#39;fs\u0026#39; const createDirIfNotExists = (dir: string) =\u0026gt; !existsSync(dir) ? mkdirSync(dir) : undefined createDirIfNotExists(\u0026#39;test\u0026#39;) // creates the directory \u0026#39;test\u0026#39;, if it doesn\u0026#39;t exist ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/development/node/snippets/create-dir-if-not-exists/","summary":" Create Directory if not Found Creates a directory, if it does not exist.\nUse fs.existsSync() to check if the directory exists, fs.mkdirSync() to create it.\nconst fs = require(\u0026#39;fs\u0026#39;) const createDirIfNotExists = dir =\u0026gt; !fs.existsSync(dir) ? fs.mkdirSync(dir) : undefined createDirIfNotExists(\u0026#39;test\u0026#39;) // creates the directory \u0026#39;test\u0026#39;, if it doesn\u0026#39;t exist import { existsSync, mkdirSync } from \u0026#39;fs\u0026#39; const createDirIfNotExists = (dir: string) =\u0026gt; !existsSync(dir) ? mkdirSync(dir) : undefined createDirIfNotExists(\u0026#39;test\u0026#39;) // creates the directory \u0026#39;test\u0026#39;, if it doesn\u0026#39;t exist ","tags":null,"title":"Create Directory if not Found"},{"categories":null,"contents":" Get All Files Gets all files, directories, sub-files, and sub-directories.\nI personally prefer to use fs-extra for my disk operations, but regular ol\u0026rsquo; fs works as well; you just need to change the import and refactor the async/await calls into callbacks.\nWith fs-extra import { readdir, stat } from \u0026#39;fs-extra\u0026#39; import { join } from \u0026#39;path\u0026#39; /** * Gets all of the files from the given directory by recursively calling itself * should one of the files be a directory. * * @param dirPath The root directory to retrieve files from. * @param files An array of files that have been found so far. * @returns A string array of all files \u0026amp; folders in the directory. */ async function getAllFiles( dirPath: string, files: string[] = [] ): Promise\u0026lt;string[]\u0026gt; { // Iterate through all files in the directory. for (const file of await readdir(dirPath)) { // Check if the file is a directory. const { isDirectory } = await stat(join(dirPath, file)) // If it _is_ a directory, recursively call this function to resolve the // nested files. if (isDirectory()) files = await getAllFiles(join(dirPath, file), files) // Else, push the file to the returned array. else files.push(join(dirPath, file)) } return files } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/development/node/snippets/get-all-files/","summary":"Get All Files Gets all files, directories, sub-files, and sub-directories.\nI personally prefer to use fs-extra for my disk operations, but regular ol\u0026rsquo; fs works as well; you just need to change the import and refactor the async/await calls into callbacks.\nWith fs-extra import { readdir, stat } from \u0026#39;fs-extra\u0026#39; import { join } from \u0026#39;path\u0026#39; /** * Gets all of the files from the given directory by recursively calling itself * should one of the files be a directory.","tags":null,"title":"Get All Files"},{"categories":null,"contents":" Razer Green Color I\u0026rsquo;ve always been fond of the green that Razer uses for their products so the following list is the color in various formats. Hex — #47E10C RGB — rgb(71, 225, 12) HSL — hsl(103, 90%, 46%) HWB — hwb(103, 5%, 12%) CMYX — cmyk(68%, 0%, 95%, 12%) NCOL — Y72, 5%, 12% ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/misc/razergreen/","summary":" Razer Green Color I\u0026rsquo;ve always been fond of the green that Razer uses for their products so the following list is the color in various formats. Hex — #47E10C RGB — rgb(71, 225, 12) HSL — hsl(103, 90%, 46%) HWB — hwb(103, 5%, 12%) CMYX — cmyk(68%, 0%, 95%, 12%) NCOL — Y72, 5%, 12% ","tags":null,"title":"Razer Green Color"},{"categories":null,"contents":" Running Commands How to run a command so that it has access to secrets stored in Doppler: Single Command doppler run -- \u0026lt;command-to-run\u0026gt; Multiple Commands doppler run --command=\u0026#34;echo \u0026#39;first part\u0026#39; \u0026amp;\u0026amp; echo \u0026#39;secondary part\u0026#39;; echo \u0026#39;final part\u0026#39;\u0026#34; Using a Secret To run one-off commands using a secret in Doppler, please make sure to escape the secret or use single quotes. You will need to do this to guard against shell parsing the variable before the run command executes. Escaped doppler run --command=\u0026#34;echo \\$SECRET_NAME\u0026#34; Single Quotes doppler run --command=\u0026#39;echo $SECRET_NAME\u0026#39; Individual echo $(doppler secrets get SECRET_NAME --plain) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/infrastructure/secrets/running-commands/","summary":"Running Commands How to run a command so that it has access to secrets stored in Doppler: Single Command doppler run -- \u0026lt;command-to-run\u0026gt; Multiple Commands doppler run --command=\u0026#34;echo \u0026#39;first part\u0026#39; \u0026amp;\u0026amp; echo \u0026#39;secondary part\u0026#39;; echo \u0026#39;final part\u0026#39;\u0026#34; Using a Secret To run one-off commands using a secret in Doppler, please make sure to escape the secret or use single quotes. You will need to do this to guard against shell parsing the variable before the run command executes.","tags":null,"title":"Running Commands"},{"categories":null,"contents":" Secret(s) Management For the time being, I\u0026rsquo;ve decided to use Doppler to manage/share/etc. secrets throughout my infrastructure.\nI say \u0026ldquo;for the time being\u0026rdquo; because my end goal for secret management is to self-host the infrastructure where my secrets are actually stored, as opposed to being stored by a 3rd party. To achieve this, I\u0026rsquo;ve been experimenting with other solutions such as Vault by HashiCorp.\nUntil I make the move to a self-hosted solution, I wrote a note on how to best make use of Doppler.\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/infrastructure/secrets-management/","summary":"Secret(s) Management For the time being, I\u0026rsquo;ve decided to use Doppler to manage/share/etc. secrets throughout my infrastructure.\nI say \u0026ldquo;for the time being\u0026rdquo; because my end goal for secret management is to self-host the infrastructure where my secrets are actually stored, as opposed to being stored by a 3rd party. To achieve this, I\u0026rsquo;ve been experimenting with other solutions such as Vault by HashiCorp.\nUntil I make the move to a self-hosted solution, I wrote a note on how to best make use of Doppler.","tags":null,"title":"Secret(s) Management"},{"categories":null,"contents":" Standard This section is specifically for badges that should be added to any and all of my repositories. I outline/describe as many badges as possible, that would actually provide some benefit, in the sections after this.\nCode Style Displays the code style used (prettier). [![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier) Discord Provides an invite link to my Discord server. [![Discord](https://img.shields.io/discord/325504841541746688?color=7289DA\u0026amp;style=flat-square)](https://discord.gg/W72x4Ks) NPM License Displays the package license. [![NPM](https://img.shields.io/npm/l/@4is-cronicle/plugin-tools)](https://npmjs.com/package/@4is-cronicle/plugin-tools) NPM Bundle Size Displays the size of the minified package tar. [![NPM Bundle Size](https://img.shields.io/bundlephobia/min/@4is-cronicle/plugin-tools?style=flat-square)](https://bundlephobia.com/package/@4is-cronicle/plugin-tools) NPM Package Version Displays the latest deployed version of the package. ![npm (scoped)](https://img.shields.io/npm/v/@4is-cronicle/plugin-tools?style=flat-square) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/development/badges/standard/","summary":"Standard This section is specifically for badges that should be added to any and all of my repositories. I outline/describe as many badges as possible, that would actually provide some benefit, in the sections after this.\nCode Style Displays the code style used (prettier). [![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier) Discord Provides an invite link to my Discord server. [![Discord](https://img.shields.io/discord/325504841541746688?color=7289DA\u0026amp;style=flat-square)](https://discord.gg/W72x4Ks) NPM License Displays the package license. [![NPM](https://img.shields.io/npm/l/@4is-cronicle/plugin-tools)](https://npmjs.com/package/@4is-cronicle/plugin-tools) NPM Bundle Size Displays the size of the minified package tar.","tags":null,"title":"Standard"},{"categories":null,"contents":" UUID Generation Generates a UUID in Node.JS.\nUse crypto.randomBytes() to generate a UUID, compliant with RFC4122 version 4. Use Number.prototype.toString(16) to convert it to a proper UUID. const crypto = require(\u0026#39;crypto\u0026#39;) const UUIDGeneratorNode = () =\u0026gt; ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =\u0026gt; (c ^ (crypto.randomBytes(1)[0] \u0026amp; (15 \u0026gt;\u0026gt; (c / 4)))).toString(16) ) UUIDGeneratorNode() // \u0026#39;79c7c136-60ee-40a2-beb2-856f1feabefc\u0026#39; import { randomBytes } from \u0026#39;crypto\u0026#39; const UUIDGeneratorNode = (): string =\u0026gt; ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =\u0026gt; (c ^ (randomBytes(1)[0] \u0026amp; (15 \u0026gt;\u0026gt; (c / 4)))).toString(16) ) UUIDGeneratorNode() // \u0026#39;79c7c136-60ee-40a2-beb2-856f1feabefc\u0026#39; ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/development/node/snippets/uuid-generation/","summary":"UUID Generation Generates a UUID in Node.JS.\nUse crypto.randomBytes() to generate a UUID, compliant with RFC4122 version 4. Use Number.prototype.toString(16) to convert it to a proper UUID. const crypto = require(\u0026#39;crypto\u0026#39;) const UUIDGeneratorNode = () =\u0026gt; ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =\u0026gt; (c ^ (crypto.randomBytes(1)[0] \u0026amp; (15 \u0026gt;\u0026gt; (c / 4)))).toString(16) ) UUIDGeneratorNode() // \u0026#39;79c7c136-60ee-40a2-beb2-856f1feabefc\u0026#39; import { randomBytes } from \u0026#39;crypto\u0026#39; const UUIDGeneratorNode = (): string =\u0026gt; ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).","tags":null,"title":"UUID Generation"},{"categories":null,"contents":" Programatic Access Accessing the secrets injected by Doppler within a programming language: Node const secret = process.env[\u0026#39;SECRET_NAME\u0026#39;] Python secret = os.getenv(\u0026#34;SECRET_NAME\u0026#34;) Go secret := os.Getenv(\u0026#34;SECRET_NAME\u0026#34;) Java String secret = System.getenv().get(\u0026#34;SECRET_NAME\u0026#34;) Rust secret = env::var(\u0026#34;SECRET_NAME\u0026#34;) Kotlin var secret: String = System.getenv(\u0026#34;SECRET_NAME\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/infrastructure/secrets/programatic-access/","summary":" Programatic Access Accessing the secrets injected by Doppler within a programming language: Node const secret = process.env[\u0026#39;SECRET_NAME\u0026#39;] Python secret = os.getenv(\u0026#34;SECRET_NAME\u0026#34;) Go secret := os.Getenv(\u0026#34;SECRET_NAME\u0026#34;) Java String secret = System.getenv().get(\u0026#34;SECRET_NAME\u0026#34;) Rust secret = env::var(\u0026#34;SECRET_NAME\u0026#34;) Kotlin var secret: String = System.getenv(\u0026#34;SECRET_NAME\u0026#34;) ","tags":null,"title":"Programatic Access"},{"categories":null,"contents":" Chat Discord [![Discord](https://img.shields.io/discord/325504841541746688?color=7289DA\u0026amp;style=flat-square)](https://discord.gg/W72x4Ks) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/development/badges/chat/","summary":" Chat Discord [![Discord](https://img.shields.io/discord/325504841541746688?color=7289DA\u0026amp;style=flat-square)](https://discord.gg/W72x4Ks) ","tags":null,"title":"Chat"},{"categories":null,"contents":" VSCode Node Support This note is a trimmed copy of a guide provided by Doppler that will \u0026ldquo;show you how to integrate the Doppler CLI into your Node.js application development and debugging workflow inside Visual Studio Code.\u0026rdquo;: Prerequisites Before beginning, ensure the following prerequisites have been met:\nDoppler CLI installed locally and authenticated (doppler login). Created a Doppler Project for your application Launch Configuration Update your existing launch configuration by creating or setting runtimeExecutable to doppler and runtimeArgs to include the command for running your application.\nA typical launch configuration object will look like the following:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;node: server\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;runtimeExecutable\u0026#34;: \u0026#34;doppler\u0026#34;, \u0026#34;runtimeArgs\u0026#34;: [\u0026#34;run\u0026#34;, \u0026#34;--\u0026#34;, \u0026#34;npm\u0026#34;,\u0026#34;start\u0026#34;] } ] } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/infrastructure/secrets/vscode-node-support/","summary":"VSCode Node Support This note is a trimmed copy of a guide provided by Doppler that will \u0026ldquo;show you how to integrate the Doppler CLI into your Node.js application development and debugging workflow inside Visual Studio Code.\u0026rdquo;: Prerequisites Before beginning, ensure the following prerequisites have been met:\nDoppler CLI installed locally and authenticated (doppler login). Created a Doppler Project for your application Launch Configuration Update your existing launch configuration by creating or setting runtimeExecutable to doppler and runtimeArgs to include the command for running your application.","tags":null,"title":"VSCode Node Support"},{"categories":null,"contents":" Doppler Integrations \u0026ldquo;Doppler connects to a growing list of providers to keep your secrets in sync wherever you develop and deploy.\u0026rdquo; This note provides information on the integrations that are relevant to my infrastructure/use-case(s). DigitalOcean https://docs.doppler.com/docs/digitalocean Docker https://docs.doppler.com/docs/installation-docker Docker Compose https://docs.doppler.com/docs/docker-compose Kubernetes https://docs.doppler.com/docs/kubernetes Terraform https://docs.doppler.com/docs/terraform Vercel https://docs.doppler.com/docs/vercel ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/infrastructure/secrets/integrations/","summary":" Doppler Integrations \u0026ldquo;Doppler connects to a growing list of providers to keep your secrets in sync wherever you develop and deploy.\u0026rdquo; This note provides information on the integrations that are relevant to my infrastructure/use-case(s). DigitalOcean https://docs.doppler.com/docs/digitalocean Docker https://docs.doppler.com/docs/installation-docker Docker Compose https://docs.doppler.com/docs/docker-compose Kubernetes https://docs.doppler.com/docs/kubernetes Terraform https://docs.doppler.com/docs/terraform Vercel https://docs.doppler.com/docs/vercel ","tags":null,"title":"Doppler Integrations"},{"categories":null,"contents":" Code Style Prettier [![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/development/badges/code-style/","summary":" Code Style Prettier [![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier) ","tags":null,"title":"Code Style"},{"categories":null,"contents":" Countly For sites that utilize Countly for analytics.\n[![Dark-Theme](https://count.ly/badges/dark.svg)](https://count.ly/f/badge) [![Light-Theme](https://count.ly/badges/light.svg)](https://count.ly/f/badge) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/development/badges/countly/","summary":" Countly For sites that utilize Countly for analytics.\n[![Dark-Theme](https://count.ly/badges/dark.svg)](https://count.ly/f/badge) [![Light-Theme](https://count.ly/badges/light.svg)](https://count.ly/f/badge) ","tags":null,"title":"Countly"},{"categories":null,"contents":" Dependencies David ![David](https://img.shields.io/david/4lch4/Digital-Garden) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/development/badges/dependencies/","summary":" Dependencies David ![David](https://img.shields.io/david/4lch4/Digital-Garden) ","tags":null,"title":"Dependencies"},{"categories":null,"contents":" Doppler API This note provides information on how to fetch Doppler secrets from within your application.\nDoppler provides the Secrets Download API however, if you\u0026rsquo;re using NodeJS then you can make use of their gitops-secrets library to do this a bit easier.\nNOTE: Doppler has plans to publish an official SDK for Node, Go, and PHP, but when it will be available has not been shared, so this is the only method for the time being. Preflight Check The first step is to create a Service Token to provide read-only access to the project and config you wish to supply secrets for:\nThen expose the Service Token value to your environment using the DOPPLER_TOKEN environment variable:\nexport DOPPLER_TOKEN=\u0026#39;dp.st.dev.xxxx\u0026#39; Async Create a doppler-secrets.js file and fetch secrets from the API using either the built-in https module or a third-party package such as axios:\n// doppler-secrets.js const https = require(\u0026#39;https\u0026#39;) module.exports.getSecrets = async () =\u0026gt; { return new Promise(function (resolve, reject) { https .get( `https://${process.env.DOPPLER_TOKEN}@api.doppler.com/v3/configs/config/secrets/download?format=json`, res =\u0026gt; { let secrets = \u0026#39;\u0026#39; res.on(\u0026#39;data\u0026#39;, data =\u0026gt; (secrets += data)) res.on(\u0026#39;end\u0026#39;, () =\u0026gt; resolve(JSON.parse(secrets))) } ) .on(\u0026#39;error\u0026#39;, e =\u0026gt; reject(e)) }) } // doppler-secrets.js const axios = require(\u0026#39;axios\u0026#39;) module.exports.getSecrets = async () =\u0026gt; { const response = await axios.get( `https://${process.env.DOPPLER_TOKEN}@api.doppler.com/v3/configs/config/secrets/download?format=json` ) return response.data } Then use an async require to fetch the secrets in your application:\n// app.js const doppler = require(\u0026#39;./doppler-secrets\u0026#39;) ;(async () =\u0026gt; { const secrets = await doppler.getSecrets() })() Sync Using async code to fetch secrets may have the undesirable side effect of making previously synchronous code now async.\nA workaround for fetching secrets asynchronously is to provide the additional option for executing doppler-secrets.js as a script and parsing the JSON output from stdout:\n// doppler-secrets.js const https = require(\u0026#39;https\u0026#39;) module.exports.getSecrets = async () =\u0026gt; { return new Promise(function (resolve, reject) { https .get( `https://${process.env.DOPPLER_TOKEN}@api.doppler.com/v3/configs/config/secrets/download?format=json`, res =\u0026gt; { let secrets = \u0026#39;\u0026#39; res.on(\u0026#39;data\u0026#39;, data =\u0026gt; (secrets += data)) res.on(\u0026#39;end\u0026#39;, () =\u0026gt; resolve(JSON.parse(secrets))) } ) .on(\u0026#39;error\u0026#39;, e =\u0026gt; reject(e)) }) } // If executed as a script if (require.main === module) { ;(async () =\u0026gt; { const secrets = await this.getSecrets() process.stdout.write(JSON.stringify(secrets)) })() } // doppler-secrets.js const axios = require(\u0026#39;axios\u0026#39;) module.exports.getSecrets = async () =\u0026gt; { const response = await axios.get( `https://${process.env.DOPPLER_TOKEN}@api.doppler.com/v3/configs/config/secrets/download?format=json` ) return response.data } // If executed as a script if (require.main === module) { ;(async () =\u0026gt; { const secrets = await this.getSecrets() process.stdout.write(JSON.stringify(secrets)) })() } Then execute doppler-secrets.js synchronously:\nJavaScript\n// app.js const secrets = JSON.parse(require(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;node doppler-secrets.js\u0026#39;)) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/infrastructure/secrets/api/","summary":"Doppler API This note provides information on how to fetch Doppler secrets from within your application.\nDoppler provides the Secrets Download API however, if you\u0026rsquo;re using NodeJS then you can make use of their gitops-secrets library to do this a bit easier.\nNOTE: Doppler has plans to publish an official SDK for Node, Go, and PHP, but when it will be available has not been shared, so this is the only method for the time being.","tags":null,"title":"Doppler API"},{"categories":null,"contents":" For Fun [![ForTheBadge](https://forthebadge.com/images/badges/60-percent-of-the-time-works-every-time.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/ages-18.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/approved-by-veridian-dynamics.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/as-seen-on-tv.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/built-by-developers.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/built-by-hipsters.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/built-by-neckbeards.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/built-for-android.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/built-with-grammas-recipe.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/check-it-out.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/contains-17-coffee-cups.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/designed-in-ms-paint.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/fuck-it-ship-it.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/no-ragrets.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/not-a-bug-a-feature.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/powered-by-black-magic.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/uses-badges.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/works-on-my-machine.svg)](https://forthebadge.com) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/development/badges/for-fun/","summary":" For Fun [![ForTheBadge](https://forthebadge.com/images/badges/60-percent-of-the-time-works-every-time.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/ages-18.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/approved-by-veridian-dynamics.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/as-seen-on-tv.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/built-by-developers.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/built-by-hipsters.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/built-by-neckbeards.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/built-for-android.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/built-with-grammas-recipe.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/check-it-out.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/contains-17-coffee-cups.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/designed-in-ms-paint.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/fuck-it-ship-it.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/no-ragrets.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/not-a-bug-a-feature.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/powered-by-black-magic.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/uses-badges.svg)](https://forthebadge.com) [![ForTheBadge](https://forthebadge.com/images/badges/works-on-my-machine.svg)](https://forthebadge.com) ","tags":null,"title":"For Fun"},{"categories":null,"contents":" Licensing NPM License ![NPM](https://img.shields.io/npm/l/@4lch4/pblib) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/development/badges/licensing/","summary":" Licensing NPM License ![NPM](https://img.shields.io/npm/l/@4lch4/pblib) ","tags":null,"title":"Licensing"},{"categories":null,"contents":" Other Powered By DigitalOcean Serves as a referral link as well. ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/development/badges/other/","summary":" Other Powered By DigitalOcean Serves as a referral link as well. ","tags":null,"title":"Other"},{"categories":null,"contents":" Size NPM Bundle Size ![[npm bundle size](https://img.shields.io/bundlephobia/min/@4lch4/pblib)](https://bundlephobia.com/package/@4lch4/pblib@0.2.1) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/development/badges/size/","summary":" Size NPM Bundle Size ![[npm bundle size](https://img.shields.io/bundlephobia/min/@4lch4/pblib)](https://bundlephobia.com/package/@4lch4/pblib@0.2.1) ","tags":null,"title":"Size"},{"categories":null,"contents":" Versioning NPM Scoped ![npm (scoped)](https://img.shields.io/npm/v/@4lch4/pblib) PowerShell Gallery ![PowerShell Gallery Version](https://img.shields.io/powershellgallery/v/Gamgee) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/development/badges/versioning/","summary":" Versioning NPM Scoped ![npm (scoped)](https://img.shields.io/npm/v/@4lch4/pblib) PowerShell Gallery ![PowerShell Gallery Version](https://img.shields.io/powershellgallery/v/Gamgee) ","tags":null,"title":"Versioning"},{"categories":null,"contents":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.toml\n``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nBúsqueda de archivos adicionales Para buscar campos adicionales definidos en el front matter, debes añadirlo en 2 lugares.\nEditar layouts/_default/index.JSON Esto expone los valores en /index.json: por ejemplo, para agregar categories ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEditar las opciones de fuse.js para buscar static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.","tags":null,"title":"Resultados de Búsqueda"},{"categories":null,"contents":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.toml\n``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nBúsqueda de archivos adicionales Para buscar campos adicionales definidos en el front matter, debes añadirlo en 2 lugares.\nEditar layouts/_default/index.JSON Esto expone los valores en /index.json: por ejemplo, para agregar categories ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEditar las opciones de fuse.js para buscar static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.","tags":null,"title":"Resultados de Búsqueda"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"অনুসন্ধানের ফলাফল"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"অনুসন্ধানের ফলাফল"},{"categories":null,"contents":"The What I recently recreated/rewrote my homepage on the internet, 4lch4.com. Previously, I was using some template that used NextJS and was really difficult to work with.\nThis new version was built with Hugo and uses the Toha theme as a base that I then expanded on with my own fork.\nThe Why(s) Why Hugo?\nBecause I\u0026rsquo;ve built a few smaller sites with it and I\u0026rsquo;ve found it to be the best static site generator I\u0026rsquo;ve ever worked with (and I\u0026rsquo;ve worked with a lot of them).\nWhy the Toha theme?\nBecause of two main reasons:\nIt looks really nice. The codebase was really well written and extremely easy to extend. Why create a website at all?\nI wanted somewhere to store various notes. It\u0026rsquo;s an easy way to highlight my skills, show what I\u0026rsquo;ve worked on, am working on, etc., when meeting with interacting with someone new. ","date":"December 15, 2022","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/posts/2022/new-4lch4.com/","summary":"I recreated my homepage on the internet.","tags":["Blog","Hugo","Websites"],"title":"My New 4lch4.com Website"},{"categories":null,"contents":"I recently learned that one of my websites was \u0026ldquo;hacked\u0026rdquo;. This blog post is my way of putting all the information in one place, sharing it with the world, and hopefully prevent this from happening to others. Or at the very least, if it does happen to you, maybe this will help you get it back and find out how they did it.\nUpdate (2022/07/25) I had this story come to mind this past week and decided to see if the individual who had defaced my website still had their GitHub account online and what do ya know, it\u0026rsquo;s gone!\nTerminology This section will likely be cut out before being posted, but I want a section on the post where I discuss/comment on the various terms I use throughout.\nHack(ed) I use the word hack, hacked, or hacker quite a bit throughout this post but what was done isn\u0026rsquo;t truly hacking, in my opinion. What was actually done was my site had been defaced. They didn\u0026rsquo;t gain access to any of my infrastructure or other tools, just stood up another site and had my DNS point to it.\nRelevant XKCD:\nDefacing/Defacer Website defacement is an attack on a website that changes the visual appearance of a website or a web page.\nAside from the basic definition above, from Wikipedia, I think what happened is best described with the above XKCD comic. There are a wide variety of ways to make it look like a website was \u0026ldquo;hacked\u0026rdquo; when in reality it was just defaced, and none of the actual infrastructure involved in hosting the site was touched.\nInitial Discovery On January 29th, 2022, I decided to update one of my simple websites (4lch4.social) that provides links to my various social media accounts. When I pulled up the site, I was greeted with a lovely message that I had been hacked:\nDigging In So, I decided to dig in and figure out how they\u0026rsquo;d done this. At first I checked my DNS entries with dog, and with my DNS host (Google Domains), and verified the DNS entries were still pointed to GitHub pages. Since they were, that meant someone was hosting the site using GitHub pages.\nInitially, I wanted to find out as much as I could about the individual \u0026ldquo;X\u0026rsquo;Boy Linux\u0026rdquo; and see what other stuff they\u0026rsquo;d done. I dropped their name into a Google search and started going through the results:\nThe first few were a Facebook with no real useful information, a profile on a defacer site, a few hacked sites, and then a YouTube channel. I opened the YouTube channel and the video that it shows off is a YouTube story where they\u0026rsquo;re showing off hacking a site. They do this by hosting a website using GitHub pages with the victim domain name in a CNAME file. While watching it, I realized they left the username of the GitHub account they used in the video.\nI went to the account and noticed quite a few repositories that were exactly the same. A CNAME file with a DNS entry, and an index.html that contained the HTML of a site saying they were hacked by X\u0026rsquo;Boy Linux. One of them, called didi, contained the DNS entry for my domain (4lch4.social).\nGetting it Back In order to re-gain control of my domain, I tried using the verified domain names that GitHub offers. However, even after verifying that I owned it by adding a TXT record, I still couldn\u0026rsquo;t use it. I read a few different articles and finally landed on one that recommended I open a support ticket. Honestly, I didn\u0026rsquo;t even know regular users could open support tickets with GitHub 😅\nAfter opening a ticket, I got a reply within a few hours from a bot that verified I did indeed own the domain name, and removed it from the hacker\u0026rsquo;s account. By the next day I was able to use my domain again and stood up a basic page so someone else couldn\u0026rsquo;t just hijack my domain (again).\n","date":"February 14, 2022","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/posts/2022/how-my-website-was-hacked/","summary":"How someone took over my unused domain name w/ GitHub Pages.","tags":["GitHub-Pages","Websites","Hacked","OSINT","Website-Defacers"],"title":"How My Website Was Hacked"},{"categories":null,"contents":"A few weeks ago, I came across this article titled \u0026ldquo;You Don\u0026rsquo;t Need to Rebuild Your Development Docker Image on Every Code Change.\u0026rdquo; As I use Docker for most of my projects, this piqued my interest. The gist of it is, you can mount your local development directory to a Docker image instead of copying your source code to the image and building it.\nWhile you wouldn\u0026rsquo;t want to do this for anything other than local development, it does help drastically with making changes and seeing them reflect as quickly as possible.\nKey Words To properly discuss this new method, there\u0026rsquo;s a few words/phrases that are helpful to know:\nOG/Original Method This refers to the original method of building a Docker image from scratch by copying your source code and executing the build commands. Mounting This method is when you mount your local development directory to the Docker container. Example I have an API called Ansel that serves as a gateway to images I have stored in a DigitalOcean Spaces bucket. It\u0026rsquo;s written in TypeScript and relatively lightweight, so doing a complete build of my Docker image takes just under 50 seconds. I\u0026rsquo;ll use this repo to demonstrate just how much faster it can be.\nInitial Dockerfile FROM node:16 WORKDIR /usr/src/app COPY . . RUN npm i RUN npm run package EXPOSE 3000 CMD [\u0026#34;npm\u0026#34;, \u0026#34;start\u0026#34;] Initially Building the Image $ docker build -t 4lch4/ansel . [+] Building 46.4s (10/10) FINISHED =\u0026gt; [internal] load build definition from Dockerfile 0.0s =\u0026gt; =\u0026gt; transferring dockerfile: 37B 0.0s =\u0026gt; [internal] load .dockerignore 0.0s =\u0026gt; =\u0026gt; transferring context: 34B 0.0s =\u0026gt; [internal] load metadata for docker.io/library/node:16 0.5s =\u0026gt; [1/5] FROM docker.io/library/node:16@sha256:a1118930ecc77da1ce4b19ac8c17adf386b7bb36b348111437f1cfca5a5c9fd7 0.0s =\u0026gt; =\u0026gt; resolve docker.io/library/node:16@sha256:a1118930ecc77da1ce4b19ac8c17adf386b7bb36b348111437f1cfca5a5c9fd7 0.0s =\u0026gt; [internal] load build context 0.0s =\u0026gt; =\u0026gt; transferring context: 9.26kB =\u0026gt; CACHED [2/5] WORKDIR /usr/src/app 0.0s =\u0026gt; [3/5] COPY . . 0.1s =\u0026gt; [4/5] RUN npm i 27.8s =\u0026gt; [5/5] RUN npm run package 13.6s =\u0026gt; exporting to image 4.3s =\u0026gt; =\u0026gt; exporting layers 4.2s =\u0026gt; =\u0026gt; writing image sha256:0134eb71af8bd2d12073779b02bc91fdf66b1c4774995f27833672d5476b2c7a 0.0s =\u0026gt; =\u0026gt; naming to docker.io/4lch4/ansel 0.0s Use \u0026#39;docker scan\u0026#39; to run Snyk tests against images to find vulnerabilities and learn how to fix them ✨ Done in 47.59s At this point, we can start a container using the new image and begin making requests. Overall, 50 seconds doesn\u0026rsquo;t sound like much, but it can add up over time, and some apps take even longer to build.\nBuilding w/ a Mounted Directory Now let\u0026rsquo;s see how fast it is to get the same results with a mounted directory. First up, we need to change our Dockerfile not to copy any code or run any build commands. We do this because the code will be built locally and just \u0026ldquo;attached\u0026rdquo; to the Docker container.\nFROM node:16 WORKDIR /usr/src/app # COPY . . # RUN npm i # RUN npm run package EXPOSE 3000 CMD [\u0026#34;npm\u0026#34;, \u0026#34;start\u0026#34;] #!/bin/bash docker stop ansel docker rm ansel yarn package docker run -d \\ -e AWS_ACCESS_KEY_ID=\u0026#34;AWS_ACCESS_KEY_ID\u0026#34; \\ -e AWS_SECRET_ACCESS_KEY=\u0026#34;AWS_SECRET_ACCESS_KEY\u0026#34; \\ -e APP_NAME=\u0026#34;Ansel\u0026#34; \\ -e VERSION=\u0026#34;1.0.0\u0026#34; \\ -e PORT=3000 \\ -e API_PREFIX=\u0026#34;/api/v1\u0026#34; \\ -e SPACES_ENDPOINT=\u0026#34;SPACES_ENDPOINT\u0026#34; \\ -e BUCKET_NAME=\u0026#34;ansel\u0026#34; \\ -e IMG_BASE_URL=\u0026#34;https://ansel.4lch4.tech\u0026#34; \\ --mount \u0026#34;type=bind,source=$(pwd),target=/usr/src/app\u0026#34; \\ -p 3000:3000 --name ansel 4lch4/ansel:latest ./mounted.sh 8.81s user 0.53s system 119% cpu 7.793 total As you can see, we went from roughly 50 seconds to 8 seconds to restart a Docker container with our latest changes, which is a huge improvement.\nWhy Does This Speed Things Up? This method is so much faster because we\u0026rsquo;re not copying the code to the image and transpiling it. Instead, we\u0026rsquo;re just attaching the local directory to the container where the transpiled code already exists. This means that our code is already built, and we don\u0026rsquo;t have to worry about rebuilding it within the image.\nConsider the following scenario using the Ansel repository/API. Our end goal is to add a new route called /error that returns a 500 for testing purposes:\nWe cloned the repo and need to make sure it\u0026rsquo;ll run. Run yarn docker:build, which runs the Docker build command. This will create an image that copies over your code and runs the build/package commands. Next, run yarn docker:start and the container spins up. Now, we make a test call (curl localhost:3000/API/v1/health) to ensure the app is online. We can open a terminal and execute tsc --watch to build our code as we work on it, meaning we don\u0026rsquo;t have to wait or run another command after making changes. To get these new changes to the Docker container, you have two options: Use the original method of copying over your code and running build commands. Use a mount to attach your local directory where the code from tsc --watch is output. If we use the original method, Docker has to copy your code and run all the build commands needed to get working code.\nIf we use the mounting method, then we only have to restart the container and make sure the new container has our local directory mounted. This means we don\u0026rsquo;t have to run a docker build command, just the starting ones.\nWhat\u0026rsquo;s The Difference in Commands? There\u0026rsquo;s not much difference between running a container using the OG method and the mounting method. Thankfully, they both use the docker run command; there\u0026rsquo;s just an extra parameter you need to provide for mounting.\nOG Method For the OG method, we\u0026rsquo;d run the following commands to restart the container with the latest code:\n#!/bin/bash docker stop ansel docker rm ansel docker build -t username/app-name:latest . docker run -d -p 3000:3000 --name ansel username/app-name:latest docker logs Ansel --follow Mounted Method For the mounted method, we only need to provide the --mount parameter to the run command, which looks like so:\n#!/bin/bash docker stop ansel docker rm ansel docker build -t username/app-name:latest . docker run --mount=\u0026#34;type=bind,source=$(pwd),target=/usr/src/app\u0026#34; -d -p 3000:3000 --name ansel username/app-name:latest docker logs Ansel --follow The critical part of this parameter is the source and target values, so let\u0026rsquo;s break it down.\nSource The source, in this case, is the current directory since this command is run from the root directory of my project. If your project is in a subdirectory, you will reference it like source=$(pwd)/subdirectory. If this isn\u0026rsquo;t set correctly, the Docker container will look in the wrong spot for your source code.\nTarget The target is where Docker will mount your files within the container. If you remember, in our Dockerfile, we use WORKDIR /usr/src/app, so we want to make sure our code/directory is mounted to the exact location. Because of this, we set the target value to /usr/src/app, so don\u0026rsquo;t forget to make sure this lines up with your Dockerfile.\nIf you have any questions or suggestions, please don\u0026rsquo;t hesitate to reach out! You can find me on several sites, all of which I link to on my socials site.\n","date":"October 5, 2021","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/posts/2021/dont-rebuild-docker-locally/","summary":"A few weeks ago, I came across this article titled \u0026ldquo;You Don\u0026rsquo;t Need to Rebuild Your Development Docker Image on Every Code Change.\u0026rdquo; As I use Docker for most of my projects, this piqued my interest. The gist of it is, you can mount your local development directory to a Docker image instead of copying your source code to the image and building it.\nWhile you wouldn\u0026rsquo;t want to do this for anything other than local development, it does help drastically with making changes and seeing them reflect as quickly as possible.","tags":null,"title":"Don't Rebuild Your Docker Image Locally"},{"categories":null,"contents":"After years of hunting and trying new things, I\u0026rsquo;ve finally found the perfect keyboard for me.\nThe ZSA Moonlander MK I.\nWhy This One? There are a few killer features that come with the Moonlander, but I\u0026rsquo;ll highlight the ones relevant to me.\nErgonomics I\u0026rsquo;ve had Carpal Tunnel since I was 13 or 14. As a result, I have to use various input devices in an attempt to prevent any flare ups.\nNo Companion Software I switch between computers multiple times a day. From MacOS, to Windows, to Linux, I use them all. Most other keyboards require you to install some sort of \u0026ldquo;companion\u0026rdquo; program on your computer for all of the customization you\u0026rsquo;ve done to actually work on that computer. With the Moonlander, that is no longer a thing.\nYou can customize the layout of your keyboard on the ZSA website and compile it to a bin. You then use their program \u0026ldquo;Wally\u0026rdquo; to flash the new firmware to the keyboard, making it so all of your custom settings are installed to the board.\nInfinite Layers Say goodbye to regular key combos. Instead of having things such as \u0026ldquo;launch this program\u0026rdquo; tied to something like Cmd+Shift+Alt+Ctrl+L, you create another \u0026ldquo;layer\u0026rdquo; of keys with one key that launches the program.\nIf you\u0026rsquo;re not familiar with this concept of layers, it\u0026rsquo;s likely this doesn\u0026rsquo;t make much sense so let me elaborate. Take the following screenshot for example:\nYou\u0026rsquo;ll notice three tabs at the top of the board, those are the three layers I have configured and ready to go, with each one serving a different purpose. When it comes to switching between those layers, you have two options:\nPress \u0026amp; Hold A key that must be held down in order to activate the alternate layer. Toggle A key that toggles on the alternate layer until it\u0026rsquo;s pressed again. To that end, if you look closely enough you\u0026rsquo;ll notice the keys that do what I mentioned. The one in the bottom left that says LT -\u0026gt; 1 means it\u0026rsquo;s a key that activates Layer 1 while the button is pressed. Letting go will return you back to your normal layer.\nIf you want to toggle the layers, that\u0026rsquo;s where the \u0026ldquo;boxed 1\u0026rdquo; key comes in. I should note, I call this key the boxed # key, but that\u0026rsquo;s because I don\u0026rsquo;t know of a better alternative 😅 The key I\u0026rsquo;m referring to is this one:\nWhen you press the boxed key, it enables the layer you specify until it is pressed again and you\u0026rsquo;re returned to the previous layer.\nSo\u0026hellip; How Did You Customize Yours? Well, when I first got the keyboard I just hooked it up and set out to get back to my original WPM. I\u0026rsquo;d never used an ergonomic keyboard before so when I first switched I went from my average of 100 - 120 WPM down to 20 - 30 WPM. I\u0026rsquo;m happy to report that after a solid 7 days of using it, I\u0026rsquo;m back to my original speed but with more errors as I get used to the fine motor skills of using this keyboard.\nCustom Keybindings Since I\u0026rsquo;m still adjusting to the keyboard, I haven\u0026rsquo;t done anything fancy with my keys in any of the layers. Now that I\u0026rsquo;m getting better with it, I\u0026rsquo;ll be tinkering with the actual keys being pressed and mess around with the layers. When I do get to that point, I\u0026rsquo;ll be sure to post it here 😄\nCustom Colors Adjustment aside, I have done some serious customizing of my board. The biggest thing being color coding various keys based on the function they serve. For example, all of my multi-function keys and layer based keys are all red-ish. This makes it easier to take a glance at my board to know what I need.\nAll regular keys such as the alphanumeric ones are green, and specialty keys that aren\u0026rsquo;t covered by the above color are set to yellow. The yellow keys include things such as left/right arrows, shift, backspace, etc.\nCustom Keycaps I\u0026rsquo;d never really gotten involved with custom keycaps before. For some reason it just never seemed appealing to me; until I got my Moonlander anyway. When I was about 50% \u0026ldquo;converted\u0026rdquo; over to this keyboard, I began poking around for custom keycaps to use for my special keys. I found a good number of keys I liked and ordered them. At the time of writing this, I\u0026rsquo;d say about 30% of the keys I ordered have arrived. That said, I\u0026rsquo;ll be sure to include plenty of photos of the ones I\u0026rsquo;ve already received and the ones I\u0026rsquo;m waiting to receive.\n","date":"July 4, 2021","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/posts/2021/perfect-keyboard/","summary":"A look into how I customized my ZSA Moonlander keyboard.","tags":["ZSA","Keyboards","Productivity"],"title":"How I Made the Perfect Keyboard Mine"},{"categories":null,"contents":"For the longest time, when creating an API with TypeScript/Node.js, I would spend a god awful amount of time finding just the right framework. Recently I decided to pick one and stick with it, so I had to find one to use. I landed on Hapi and used that for quite some time, including projects at my full time job. Eventually, I began to have issues with Hapi in TypeScript so I began poking around for a framework with better TypeScript support. That was when I found Koa, from the makers of Express.\nI now use Koa for all of my API needs, but there was a plugin I used with my Hapi APIs that I missed more than anything. That simple plugin would spit out a table of routes/methods that my API was listening to, based on what was registered previously. I dug around on Google/DuckDuckGo for a while and couldn\u0026rsquo;t find anything that fit my needs/wants. As a result, I ended up building my own module to do just that and am now publishing it for anyone else to use.\nKey Info The full name of the module is @4lch4/koa-router-printer, and since that\u0026rsquo;s a bit of a mouthful, I\u0026rsquo;ll be referring to it as KRP.\nNaming aside, the module requires that you add your routes/paths with the @koa/router module, as that is what I use to determine what routes are registered. Lastly, it will only work if you register your routes before calling the KRP module.\nExample Enough talk; here are some samples of how it works and the available options. First up, the defaults.\nDefaults import Printer from \u0026#39;@4lch4/koa-router-printer\u0026#39; import Koa from \u0026#39;koa\u0026#39; import Router from \u0026#39;@koa/router\u0026#39; const router = new Router({ prefix: \u0026#39;/api/v1\u0026#39; }) router.get(\u0026#39;/hello\u0026#39;, ctx =\u0026gt; { ctx.status = 200 ctx.body = \u0026#39;OK\u0026#39; }) const app = new Koa() app.use(router.routes()) app.use(router.allowedMethods()) Printer(app) If you use the module as shown above with no custom options, a table like so will be displayed:\njisodl0 at macx-382fq05p in ~/Development/alcha/playground/krp-tester $ ts-node src/index.ts ┌───────────────┬───────────┐ │ Path │ Method(s) │ ├───────────────┼───────────┤ │ /api/v1/hello │ GET │ └───────────────┴───────────┘ Custom Options Alternatively, you can pass an options object to the Printer function and change what is displayed:\nPrinter(app, { // Displays the HEAD method if assigned to a route. displayHead: true, // Display the prefix in the Path column. displayPath: true }) Results in:\njisodl0 at macx-382fq05p in ~/Development/alcha/playground/krp-tester $ ts-node src/index.ts ┌───────────────┬─────────────┐ │ Path │ Method(s) │ ├───────────────┼─────────────┤ │ /api/v1/hello │ HEAD -- GET │ └───────────────┴─────────────┘ Conclusion So, to wrap things up. If you\u0026rsquo;re interested in using KRP, download it and use it as mentioned above. If you have any comments, criticisms, or concerns, please reach out to me directly or by posting an Issue to the GitHub repository.\n","date":"July 4, 2021","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/posts/2021/koa-router-printer/","summary":"A brief overview/explanation of my new NPM module that displays the registered routes of an API using Koa.","tags":["NPM","Node.js","TypeScript","Koa","Koa-Router","Libs"],"title":"Koa Router Printer NPM Module"},{"categories":null,"contents":" This is the first of many posts on my blog. I intend on adding all of the writing I\u0026rsquo;ve done before, as well as anything done in the future.\nAbout Me Since this is my first post I figure I should introduce myself. My name is Devin W. Leaman, and I go by 4lch4 (Al-kuh) online. I\u0026rsquo;m currently 26 years old and live in Arkansas, USA.\nI\u0026rsquo;ve been a programmer professionally since 2015 where my first job after college was a Jr. Software Test Engineer for SAPIEN Technologies, Inc. My primary job was to test the various products we provided before they were released but I was also responsible for converting their iOS/macOS application to Android which was my first professional experience writing code.\nAfter SAPIEN I moved back to AR and began doing freelance work through Upwork. Most of this was customizing SquareSpace sites beyond the default abilities with JavaScript or custom CSS. Some of it involved more custom work such as building a website using Angular or Jekyll, depending on the customers needs.\nFollowing my stint as a freelancer I began working as a contractor in the NOC at J.B. Hunt in February of 2019. In February 2020, just before COVID took the US by storm, I was converted to a full time employee and have been a NOC Engineer at J.B. Hunt ever since. My responsibilities range from providing support for developers with their CI/CD pipelines, to helping resolve active issues in Production as they occur, and developing applications that make our jobs of supporting the company infrastructure a bit easier or more efficient.\nWhat Will I Write About? Well, I won\u0026rsquo;t be boxing myself into anything in particular. That said, at the time of this post the most writing I tend to do is technical guides, documentation for various projects, or an explanation of something interesting that I\u0026rsquo;ve learned recently.\nAside from technical things, I\u0026rsquo;ll also wind up writing about my life in general and the various things I do.\nAll that said, I hope if you\u0026rsquo;re reading this then you\u0026rsquo;ll enjoy the rest of what I write 😅\n","date":"May 15, 2021","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/posts/2021/hello-world/","summary":"The first blog post of this new blog site.","tags":["first"],"title":"Hello World!"},{"categories":null,"contents":" Fizz Buzz in PowerShell I\u0026rsquo;m going to start with a little anecdote before getting started on the meaty portion of this article so feel free to skip ahead to No More Anecdote if you\u0026rsquo;re just not that interested 😅 I completely understand.\nI realized about two weeks ago that I hadn\u0026rsquo;t written anything in a while and had a bit of a desire to write, with nothing coming to mind on what to write. I was also dealing with a nagging feeling in my brain of \u0026ldquo;Should I really write another article?\u0026rdquo; and if I did \u0026ldquo;Who really cares if I write another article? There are countless others writing about the same stuff\u0026rdquo;, among other negative thoughts.\nI went to a get together with some of my best friends to eat tacos, drink some tequila, and just enjoy each others company. While I was there, one of my more technically oriented friends came up to me and we began talking about my work, playing Overwatch, and other nerdy things, when he mentions to me that he enjoyed reading my past articles. While he may not be a currently active developer and that some of the stuff goes over his head, I\u0026rsquo;ve \u0026ldquo;got a knack for it\u0026rdquo; as he said.\nI was elated to hear this, and haven\u0026rsquo;t felt that way about a \u0026ldquo;project\u0026rdquo; aside from when I can add features to Tron that are heavily requested by the user base. It was enough to remind me the whole reason I started writing these is for the off-chance that someone like that would enjoy my writing and possibly get them more interested in programming, learn something new, or simply enjoy the read for the sake of reading something interesting.\nIn the end, I\u0026rsquo;d like to say thank you again to that friend of mine for the encouraging words, as I probably wouldn\u0026rsquo;t have had the motivation to start on this without them 💗\nNo More Anecdote Photo by Raj Eiamworakul on Unsplash\nAnd now we\u0026rsquo;re off to the juicy bits of the article! 🤤 If you\u0026rsquo;re unfamiliar with the Fizz Buzz interview problem, it\u0026rsquo;s a relatively simple problem that is adept at testing your knowledge and fundamental understanding of a given programming language as well as showing the interviewer what kind of developer you are.\nFor example, do you prefer to toss a bunch of things at the wall and see what works and whittle away the excess? Or do you prefer to lay out a plan for the program before you even write some code? If you\u0026rsquo;d like more information on the things interviewers can gleam from a Fizz Buzz solution, feel free to check out this article from Lionell Pack on Forbes.\nWhat\u0026rsquo;s The Problem? The actual problem was (from what I can tell, please correct me if I\u0026rsquo;m wrong) initially put forth by Imron Ghory over on his blog and it was based on a \u0026quot;group word game for children to teach them about division.\u0026quot; While there\u0026rsquo;s a number of different ways to word this problem, here\u0026rsquo;s the wording we\u0026rsquo;re going to be working with:\nWrite a program that prints the numbers 1 to 100. However, for multiples of three, print \u0026ldquo;Fizz\u0026rdquo; instead of the number. Meanwhile, for multiples of five, print \u0026ldquo;buzz\u0026rdquo; instead of the number. For numbers which are multiples of both, print \u0026ldquo;FizzBuzz.\u0026rdquo;\nThis means there are a few things we need to keep in mind or consider:\nThe minimum value of 1. The maximum value of 100. Determine which order to check for multiples to avoid missing edge cases. Write the output to the console. Where to Start? Well, this is where it varies for everyone. Depending on how you tend to work as a developer, your entry point will vary. Personally, I\u0026rsquo;ll be starting by creating the for loop that will iterate through all the numbers we need to analyze. This starts us off with something like the following for PowerShell:\nfor ($x = 1; $x -le 100; $x++) { Write-Output $x } This will get us a starting point of outputting every number from 1 to 100. Now we should start putting in some if statements to determine if $x is a multiple of 3, 5, or both. As is the case with most modern programming languages, PowerShell has a modulus operator that will return the remainder of the division between two numbers.\nFor example, doing Write-Output (25 % 5) would output 0, since 25 divided by 5 has no remainder. This also happens to mean the first value is a multiple of the second, which we can use to determine the multiples of $x. When I first wrote this script, my solution looked like so:\nfor($x = 1; $x -le 100; $x++) { $Threes = $x % 3 $Fives = $x % 5 if (($Threes -eq 0) -and ($Fives -eq 0)) { Write-Output \u0026#34;FizzBuzz\u0026#34; } else if ($Threes -eq 0) { Write-Output \u0026#34;Fizz\u0026#34; } else if ($Fives -eq 0) { Write-Output \u0026#34;Buzz\u0026#34; } else { Write-Output $x } } Cleaning Up Our First Draft While this works, it\u0026rsquo;s a bit clunky and doesn\u0026rsquo;t allow for us to easily modify it in the future if we want to add cases other than being a multiple of 3 or 5. I hadn\u0026rsquo;t quite realized this until I went looking for more information on this problem and found a video by Tom Scott. He pointed out that you could easily account for future adjustments by combining the output as a single variable for each number.\nWhile he used JavaScript, the solution should be easily understandable and looks like so:\nfor (var i = 1; i \u0026lt;= 100; i++) { var output = \u0026#39;\u0026#39; if (i % 3 === 0) output += \u0026#39;Fizz\u0026#39; if (i % 5 === 0) output += \u0026#39;Buzz\u0026#39; if (output === \u0026#39;\u0026#39;) output = i console.log(output) } As you can see, he creates the output variable for each iteration of $x and depending on the multiples, adds or replaces values to that variable. Then, in the end, he outputs it to the console using console.log. Translating this to PowerShell, we get something like so:\nfor ($x = 1; $x -le 100; $x++) { $Output = \u0026#34;\u0026#34; if ($x % 3 -eq 0) { $Output += \u0026#34;Fizz\u0026#34; } if ($x % 5 -eq 0) { $Output += \u0026#34;Buzz\u0026#34; } if ($Output -eq \u0026#34;\u0026#34;) { $Output = $x } Write-Output $Output } At this point, we have a working solution to the Fizz Buzz problem written in PowerShell. If you were to copy and paste it into a terminal you\u0026rsquo;d get something that looks like this:\nFinally, A Script! Now, since this is PowerShell, it\u0026rsquo;s no fun just having a for loop that we need to copy paste. No, we need a script! 😈\nI created a file simply titled FizzBuzz.ps1 and got to work by adding the standard goodies at the top of a PowerShell script:\n[CmdletBinding()] param ( ) Since I was initially writing this script for the sample programs repository I contribute to, I knew I wanted to support more than going from 1 to 100. Instead, I wanted users to be able to provide a minimum and maximum parameter that would let them modify the output. This simply means adding two parameters to the param () field like so:\nparam ( [Parameter(Mandatory = $false, Position = 0)] $Min = 1, [Parameter(Mandatory = $false, Position = 1)] $Max = 100 ) The Mandatory and Position attributes tell PowerShell that the parameters have default values and that they aren\u0026rsquo;t mandatory, and the position attribute makes it possible to do something like .\\FizzBuzz.ps1 0 75 to adjust the min and max without having to specify the parameter names. Then, with some minor changes to the for loop, we have our finished result!\n\u0026lt;# .SYNOPSIS A simple script that solves the standard FizzBuzz interview problem. .DESCRIPTION A simple script that solves the FizzBuzz interview problem to illustrate flow control within a PowerShell script. .PARAMETER Min The minimium value to start counting at (inclusive). Defaults to 1. .PARAMETER Max The maximum value to count to (inclusive). Defaults to 100. .EXAMPLE .\\FizzBuzz.ps1 1 2 Fizz 4 Buzz Fizz ... .EXAMPLE .\\FizzBuzz.ps1 -Min 10 -Max 75 Buzz 11 Fizz 13 14 FizzBuzz 16 ... .NOTES For reference, here\u0026#39;s a copy of the FizzBuzz problem that this script solves, the only difference between the requested solution and this script is the script will let you determine the minimum and maximum values if you desire: \u0026#34;Write a program that prints the numbers 1 to 100. However, for multiples of three, print \u0026#34;Fizz\u0026#34; instead of the number. Meanwhile, for multiples of five, print \u0026#34;Buzz\u0026#34; instead of the number. For numbers which are multiples of both, print \u0026#34;FizzBuzz\u0026#34; #\u0026gt; [CmdletBinding()] param ( [Parameter(Mandatory = $false, Position = 0)] $Min = 1, [Parameter(Mandatory = $false, Position = 1)] $Max = 100 ) for ($X = $Min; $X -le $Max; $X++) { $Output = \u0026#34;\u0026#34; if ($X % 3 -eq 0) { $Output += \u0026#34;Fizz\u0026#34; } if ($X % 5 -eq 0) { $Output += \u0026#34;Buzz\u0026#34; } if ($Output -eq \u0026#34;\u0026#34;) { $Output = $X } Write-Output $Output } ","date":"August 7, 2018","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/posts/2018/solving-the-fizzbuzz-problem-in-powershell/","summary":"A simple solution to the standard Fizz Buzz interview question.","tags":["PowerShell","Tips","Interviews","FizzBuzz"],"title":"Solving the FizzBuzz Problem in PowerShell"},{"categories":null,"contents":"Table of Contents Table of Contents PowerShell Profile Basics What\u0026rsquo;re We Trying to Achieve? To-Do Where Do We Start? Customizing the Title/Prompt Getting The Weather Conclusion PowerShell Profile Basics It\u0026rsquo;s important to point out that knowledge of PowerShell profiles, while helpful ahead of time, isn\u0026rsquo;t absolutely required to read this article and potentially gain some value. If you do wish to get some information ahead of time, I highly recommend taking a look at this blog post by The Scripting Guys\u0026rsquo; Ed Wilson.\nThere are only a couple things I think you need to know about profiles in PowerShell before continuing on:\nA profile is a script that allows you to customize your console by being executed as soon as you launch said console. There are 6 profiles you can utilize to choose exactly which console you\u0026rsquo;d like to customize. What\u0026rsquo;re We Trying to Achieve? With that said, this is gonna be a long read so let\u0026rsquo;s get started. Here is an image of my current console on startup (our end goal):\nI like it to show me the current weather report, and I\u0026rsquo;ve customized the prompt line to show the current directory name and time as opposed to the standard look:\nTo-Do So, this means we have 3 \u0026ldquo;tasks\u0026rdquo; to complete for our desired look:\nAdd the weather API for our date integration Add the current time to the beginning of the current shell line Add the current directory to the end of the current shell line Where Do We Start? To be completely honest, as I started to write this post I realized I had no idea how I did this aside from having to overwrite a function in my profile called global:prompt I believe. So, I opened my profile script in PowerShell Studio which is located at C:\\Users\\Alcha\\Documents\\WindowsPowerShell\\Profile.ps1 and saved a backup copy (Profile_Backup.ps1). Then, a lovely Ctrl + A → Backspace so we have a clean slate.\nFirst up, we need to find out how to customize the prompt itself, so a quick google search will get us started. The first three results were more than enough to get me what I needed. Personally, I prefer reading examples over documentation so after scanning over the three links, I chose to focus on the third as it seemed rather lengthy and full of examples. After reading a bit more, I realized it was more focused on posh-git specifically, so I switched back to the Scripting Guys response written by Sean Kearney.\nCustomizing the Title/Prompt While Sean first covers how to customize the title of the window, this is something I didn\u0026rsquo;t know about before and wound up changing in my profile, so hooray for new stuff! More specifically, I started by adding this line to customize the $Host.UI.RawUI.WindowTitle property:\n$Host.UI.RawUI.WindowTitle = (Get-Date).ToString() While it was neat, I didn\u0026rsquo;t quite like the format:\nAfter some tinkering, I landed on the '%y/%m/%d %R' format. Which you\u0026rsquo;d use like Get-Date -UFormat '%y/%m/%d %R' , and your result should look something like this:\nNow that I\u0026rsquo;ve got my title the way I want it, on to the rest. Next, Sean mentions the default prompt function, which is what\u0026rsquo;s executed every time your prompt is displayed:\n\u0026#34;PS $($executionContext.SessionState.Path.CurrentLocation)$(\u0026#39;\u0026gt;\u0026#39; * ($nestedPromptLevel + 1)) \u0026#34; Bingo! Now we can take care of the 3rd item on our To-Do list: Add the current directory to the end of the current shell line To do this, we need to get the current working directory, which is available a number of ways. We can either use the $PWD variable which stores the current variable, or we can use the Get-Location cmdlet, which is what we\u0026rsquo;ll be doing.\nGet-Location by default returns the entire current path, but we\u0026rsquo;re only interested in the last portion of it, so we can get that part by using the Split-Path cmdlet:\nSplit-Path (Get-Location) -Leaf\t# Gives us \u0026#39;Alcha\u0026#39; Now we need to combine knowledge of the Prompt function, how to get the current date/time, and the Get-Location cmdlet to get our desired result. The function will end up looking something like this:\nfunction Prompt { $Host.UI.RawUI.WindowTitle = (Get-Date -UFormat \u0026#39;%y/%m/%d %R\u0026#39;).Tostring() Write-Host \u0026#39;[\u0026#39; -NoNewline Write-Host (Get-Date -UFormat \u0026#39;%T\u0026#39;) -ForegroundColor Green -NoNewline Write-Host \u0026#39;]:\u0026#39; -NoNewline Write-Host (Split-Path (Get-Location) -Leaf) -NoNewline return \u0026#34;$ \u0026#34; } We need the -NoNewLine parameter in order to put all of the text on the same line. This also allows us to separate it all into 5 separate lines and color the current time green while the rest remains the default white. Lastly, I moved the line to customize the title here because now whenever the prompt is updated, so is the title, and it\u0026rsquo;ll show the \u0026ldquo;current\u0026rdquo; time. Now our console should look like so on startup:\nWith that, we\u0026rsquo;ve got two items from our To-Do list complete, and we can move on to the easiest part, which is adding a weather API to display the current conditions for our area.\nGetting The Weather Now, to get the weather we\u0026rsquo;ll be using the OpenWeatherMap service, mostly because I found a script at some point in the past that automatically formats the output into what you saw in the first screenshot. In order to use the service though, we need to get an API key that we can pass to the script.\nWhen you create an account on OpenWeatherMap, go to the API keys portion of your account, which if you can\u0026rsquo;t find is available here. Create a key and name it whatever you want, I just left mine as \u0026ldquo;Default\u0026rdquo;:\nNow that we have a key, we need to add the Get-Weather script to our profile. The way I did this was I created a new script in my profiles directory (C:\\Users\\Alcha\\Documents\\WindowsPowerShell\\) called Get-Weather.ps1 and then copy/pasted the content of the script from GitHub. I\u0026rsquo;m bit of a stickler for variable naming conventions and capitalization so after some refactoring, I wound up with a script that looks something like this:\nI won\u0026rsquo;t cover the meat and bones of the script, as this is already a rather lengthy post 😅 but the full text of \u0026ldquo;my\u0026rdquo; version of obs0lete\u0026rsquo;s script is available as a gist, you just need to plug in your API key for it to function properly. Now to use this, we need only dot-source the file in our profile and then call the Get-Weather function to kick it all off:\nYou\u0026rsquo;ll of course have to change the API key, city, and country to values that work for you, but it\u0026rsquo;s fairly simple. Something to note, I found a hard time with the actual city I live in, as there\u0026rsquo;s a number of other cities in the USA with the same name. This meant I was getting really weird weather results from the API, imagine it saying it\u0026rsquo;s raining outside when it\u0026rsquo;s bright and sunny. I fixed this by finding the neighboring large city and using their name instead:\nConclusion It\u0026rsquo;s important to note that I changed the original Get-Weather script just enough to make it work for me, so be sure to make any adjustments you might need. For example, I mentioned adjusting the variable names, but I also updated the units from Metric to Imperial and made it so it would output the Attempting URL\u0026hellip; line mostly for debugging but also as a test for if the API isn\u0026rsquo;t working for whatever reason.\nI hope this wasn\u0026rsquo;t too painful of a read, I did my best to only cover the interesting bits of solving this problem and leave out any fat that was just dull or involved me spacing out and endlessly scrolling 😂 If you have any questions, comments, or concerns, please feel free to reach out to me on any of my social networks or email me at admin@alcha.org.\n","date":"June 3, 2018","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/posts/2018/how-to-uniquify-your-powershell-console/","summary":"A few tips to help make your PowerShell console \u0026ldquo;unique\u0026rdquo; in its own right.","tags":["PowerShell","PowerShell-Profile","Tips","Enhancements"],"title":"How to Uniquify Your PowerShell Console"},{"categories":null,"contents":"The following is a blog post I wrote for The Renegade Coder\u0026rsquo;s sample-programs repository.\nPowerShell Background PowerShell is the de facto scripting language for managing Windows machines/servers. Microsoft has made it quite clear that PowerShell is here to stay and will become the preferred way to manage Windows servers in the future.\nJeffrey Snover is largely credited as the designer behind the language, while Bruce Payette and James Truher were also on the project, and in an interview in 2017, Snover explained the motivation behind creating PowerShell:\nI\u0026rsquo;d been driving a bunch of managing changes, and then I originally took the UNIX tools and made them available on Windows, and then it just didn\u0026rsquo;t work. Right? Because there\u0026rsquo;s a core architectural difference between Windows and Linux. On Linux, everything\u0026rsquo;s an ASCII text file, so anything that can manipulate that is a managing tool. AWK, grep, sed? Happy days!\nI brought those tools available on Windows, and then they didn\u0026rsquo;t help manage Windows because in Windows, everything\u0026rsquo;s an API that returns structured data. So, that didn\u0026rsquo;t help. [\u0026hellip;] I came up with this idea of PowerShell, and I said, \u0026ldquo;Hey, we can do this better.\u0026rdquo;\nOriginally, PowerShell was to be called Monad and it\u0026rsquo;s ideas were published in a white paper titled Monad Manifesto. Shortly after releasing the Beta 3 version Microsoft formally renamed Monad to Windows PowerShell, followed by the release candidate 1 version.\nPowerShell is now up to version 5.1 for stable builds and the new 6.0 version which was announced in 2016 is in public beta. The largest change in this version is it\u0026rsquo;s now open-source and will now be called PowerShell Core as it runs on .NET Core as opposed to the .NET Framework which previous versions use.\nHello World in PowerShell Enough background, let\u0026rsquo;s actually get something working 😊\nWrite-Host \u0026#39;Hello, World!\u0026#39; To execute this code, simply open a PowerShell console on any Windows machine as it comes installed by default. You\u0026rsquo;ll see the reply output in the window like so:\nAs is the case with most modern scripting languages, getting a Hello World sample running is really easy.\nHow to Run the Solution Instead of running the commands directly within the console though, the best route is to write your scripts in a file and call the file when necessary. Download a copy of the Hello-World.ps1 file from the repository and open a console.\nNow, navigate to wherever you downloaded the script and execute it by calling it like so:\n.\\Hello-World.ps1 This calls the script and returns the output to the console:\n","date":"May 31, 2018","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/posts/2018/hello-world-in-powershell/","summary":"A brief look at PowerShell and a Hello World script.","tags":["PowerShell","Beginner","Learning"],"title":"Hello World in PowerShell"},{"categories":null,"contents":"I\u0026rsquo;ve never been much of an OS/Platform purist. For as long as I can remember I have switched between Unix/Windows based systems on a regular basis for various reasons. With that said, I develop primarily on a Windows machine, and most of my projects end up running on a Linux server (Node modules), or on a Linux kernel (Android) of some sort, so being familiar with the *nix school of thought is quite helpful in the long run.\nWithout getting too thick in my personal examples of what it\u0026rsquo;s like living between platforms, I\u0026rsquo;d instead like to share some of the stuff I\u0026rsquo;ve written or tools I use to make my life a bit easier.\nThis post explicitly covers a script I wrote and added to my Current User, Current Host - console PowerShell Profile to make initializing new Node.js modules much easier and specific to my preferences.\nIf you\u0026rsquo;d like, you can skip straight to the code on GitHub if that\u0026rsquo;s more your style, or read on for my explanation of my problem and my solution.\nWhat was the problem? Well, it wasn\u0026rsquo;t a problem so much as a nuisance. When creating a new Node module, my standard workflow was something like so:\nOpen Visual Studio Code Go to File -\u0026gt; Open Folder Navigate to my Node.js modules folder -\u0026gt; Create a folder for the module Open the newly created folder and launch the integrated terminal Use npm init to setup the package.json with my default values Use touch index.js; code index.js to create the new file and start work To say this is a bit tedious and annoying would be an understatement.\nWhat\u0026rsquo;s my solution? I created a PowerShell Script called New-NodeModule.ps1, with a single function New-NodeModule, that I dot-source in my Profile.ps1. The function does the most common things I do when creating a new module, such as create a package.json with the default values for the license, author info, and so forth.\nThe only required information to create a new module is the name of the module, which is accepted as the first parameter or using a named parameter like New-NodeModule -ModuleName outside-cli. If desired, you can set the location for the module to be stored using the -ModulePath parameter. Moreover, regarding the accepted parameters, I prefer to open the newly created module in Visual Studio Code right after creating it so there\u0026rsquo;s a -OpenInVSCode parameter that defaults to $true but can be set to $false to prevent opening the newly created module.\nWhat\u0026rsquo;re the default values? When creating a new Node module, I tend to use a lot of the same settings. For example, I always use Jest for testing purposes and all of my projects are formatted/linted with StandardJS. More specifically:\nAs I\u0026rsquo;m creating the module, I can rest assured that I\u0026rsquo;m the author, so I\u0026rsquo;ll always have the author block filled with information about myself I always have the start script as a simple node .\\index.js I mentioned I test with Jest, so my test script will always start with jest I prefer my projects to be licensed under the MIT License as it most aligns with my views on OSS For more specifics, refer to the source code itself as it\u0026rsquo;s all right there. 🤓\nConclusion To conclude, the last significant change I made to make it easier to use this new file was to add aliases to the New-NodeModule function (nodemod, new-nodemod, newmod, newmodule, newnpm). Now, whenever I want to create a new module, I simply type newmod in my terminal and it does what I need 😊\nIf you have any questions, comments, or concerns, please feel free to contact me directly or comment on the post!\n","date":"May 25, 2018","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/posts/2018/new-node-modules-w-powershell/","summary":"Initializing a new Node module using PowerShell.","tags":["PowerShell","Node.js","JavaScript"],"title":"New Node Modules w/ PowerShell"},{"categories":null,"contents":" Alert Shortcodes The following alerts are available in this theme.\nThis is sample alert with type=\u0026quot;success\u0026quot;. This is sample alert with type=\u0026quot;danger\u0026quot;. This is sample alert with type=\u0026quot;warning\u0026quot;. This is sample alert with type=\u0026quot;info\u0026quot;. This is sample alert with type=\u0026quot;dark\u0026quot;. This is sample alert with type=\u0026quot;primary\u0026quot;. This is sample alert with type=\u0026quot;secondary\u0026quot;. Image Shortcodes A sample image without any attribute \u0026lt;img src=\u0026quot;/posts/shortcodes/boat.jpg\u0026quot;\nalt=\u0026quot;A boat at the sea\u0026quot; A sample image with height and width attributes \u0026lt;img src=\u0026quot;/posts/shortcodes/boat.jpg\u0026quot;\nalt=\u0026quot;A boat at the sea\u0026quot; width=\u0026quot;600\u0026quot; height=\u0026quot;400\u0026quot; A center aligned image with height and width attributes \u0026lt;img src=\u0026quot;/posts/shortcodes/boat.jpg\u0026quot;\nalt=\u0026quot;A boat at the sea\u0026quot; width=\u0026quot;600\u0026quot; height=\u0026quot;400\u0026quot; class=\u0026quot;center\u0026quot; A image with float attribute \u0026lt;img src=\u0026quot;/posts/shortcodes/boat.jpg\u0026quot;\nalt=\u0026quot;A boat at the sea\u0026quot; width=\u0026quot;500\u0026quot; height=\u0026quot;200\u0026quot; style=\u0026quot;float: right;\u0026quot; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. Praesent tellus risus, eleifend vel efficitur ac, venenatis sit amet sem. Ut ut egestas erat. Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. Suspendisse nec ipsum eu erat finibus dictum. Morbi volutpat nulla purus, vel maximus ex molestie id. Nullam posuere est urna, at fringilla eros venenatis quis.\nFusce vulputate dolor augue, ut porta sapien fringilla nec. Vivamus commodo erat felis, a sodales lectus finibus nec. In a pulvinar orci. Maecenas suscipit eget lorem non pretium. Nulla aliquam a augue nec blandit. Curabitur ac urna iaculis, ornare ligula nec, placerat nulla. Maecenas aliquam nisi vitae tempus vulputate.\nVideo Shortcodes \\{\\{\u0026lt; video src=\u0026quot;/videos/sample.mp4\u0026quot; \u0026gt;\\}\\}\nVideo by Rahul Sharma from Pexels.\nGist Shortcodes Sample \u0026gt; Remove the backslashes when actually using. \\{\\{\u0026lt; gist hossainemruz 4ad86c9b6378677e14eff12713e75e44 \u0026gt;\\}\\} Demo Full Markdown Sample Other Elements — abbr, sub, sup, kbd, mark \u0026lt;abbr title=\u0026#34;Graphics Interchange Format\u0026#34;\u0026gt;GIF\u0026lt;/abbr\u0026gt; is a bitmap image format. H\u0026lt;sub\u0026gt;2\u0026lt;/sub\u0026gt;O X\u0026lt;sup\u0026gt;n\u0026lt;/sup\u0026gt; + Y\u0026lt;sup\u0026gt;n\u0026lt;/sup\u0026gt; = Z\u0026lt;sup\u0026gt;n\u0026lt;/sup\u0026gt; Press \u0026lt;kbd\u0026gt;\u0026lt;kbd\u0026gt;CTRL\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;ALT\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;Delete\u0026lt;/kbd\u0026gt;\u0026lt;/kbd\u0026gt; to end the session. Most \u0026lt;mark\u0026gt;salamanders\u0026lt;/mark\u0026gt; are nocturnal, and hunt for insects, worms, and other small creatures. GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nEmoji Rendering \u0026lt;p\u0026gt; \u0026lt;span class=\u0026#34;nowrap\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;emojify\u0026#34;\u0026gt;🙈\u0026lt;/span\u0026gt; \u0026lt;code\u0026gt;🙈\u0026lt;/code\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;nowrap\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;emojify\u0026#34;\u0026gt;🙉\u0026lt;/span\u0026gt; \u0026lt;code\u0026gt;🙉\u0026lt;/code\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;nowrap\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;emojify\u0026#34;\u0026gt;🙊\u0026lt;/span\u0026gt; \u0026lt;code\u0026gt;🙊\u0026lt;/code\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;br\u0026gt; 🙈 🙈 🙉 🙉 🙊 🙊 ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/development/4lch4.com/","summary":"Alert Shortcodes The following alerts are available in this theme.\nThis is sample alert with type=\u0026quot;success\u0026quot;. This is sample alert with type=\u0026quot;danger\u0026quot;. This is sample alert with type=\u0026quot;warning\u0026quot;. This is sample alert with type=\u0026quot;info\u0026quot;. This is sample alert with type=\u0026quot;dark\u0026quot;. This is sample alert with type=\u0026quot;primary\u0026quot;. This is sample alert with type=\u0026quot;secondary\u0026quot;. Image Shortcodes A sample image without any attribute \u0026lt;img src=\u0026quot;/posts/shortcodes/boat.jpg\u0026quot;\nalt=\u0026quot;A boat at the sea\u0026quot; A sample image with height and width attributes \u0026lt;img src=\u0026quot;/posts/shortcodes/boat.","tags":null,"title":"4lch4.com Notes"},{"categories":null,"contents":"Ever heard of Leonardo Syndrome?\nIf you’ve read Peter Burke’s excellent book, The Polymath,1 then you will have done, but if not: Leonardo Syndrome is where the drive to learn more and more results in beginning many projects but actually finishing few.2\nIt’s named ‘Leonardo Syndrome’ after Leonardo da Vinci himself. Despite being one of the most famous polymaths and creators in history - who doesn’t know about him?! - he was also somebody prone to failure.\nExamples of his failures included not successfully squaring the circle, multiple engineering designs that didn’t work such as a giant crossbow and a flying machine, misunderstanding several aspects of the heart,3 and experimental painting designs that resulted in the slow degradation of a painting.\nEven his first recorded commission as an independent painter - an altarpiece for the Chapel of San Bernardo in 1478 - he failed to complete, despite receiving a cash advance of 25 florins for it.4 Many of his contemporaries noted that he failed to meet deadlines or to even finish projects, such as never finishing a commissioned equestrian statue of Francesco Sforza.5\nHis unreliability was so consistent that that the Duke of Milan tried to get him to sign a contract confirming that he would finish the agreed work “within the stipulated period”.6 Leonardo never signed this, and indeed in his diary in 1499 admitted that he had never finished a project for the Duke.7 People doubted his abilities to complete projects so much that they would request other artists instead of him - they would often end up calling in other artists to finish or repair his work, anyway.8\nHis reputation was one of brilliance - and failure.\nHe ended up short of money, moving from patron to patron - leaving a trail of frustration in his wake - yet what we remember about him now is his genius. His endless curiosity was the source of his brilliance and his success, but also the cause of his woes; it was his hamartia, to put it in terms of a Greek tragedy.9\nYet if he had finished all of those commissions and followed through with his million-and-one ideas, what wouldn’t he have done? To do one thing means not to do another. What would now be missing from the world, had Leonardo da Vinci slogged dutifully away at a horse statue for a duke?\nMaybe that statue itself would have been something brilliant, but it certainly wouldn’t have kept him on the same course he ended up treading. That course is what eventually led him to the Mona Lisa - which in itself is unfinished, yet still a renowned work that inspires and transfixes people to this day.\nNone of us, I suggest, are on par with Leonardo da Vinci’s genius.10 Many of us, however, will relate to Leonardo Syndrome. Reading about it was like a slap in the face for me; I stared at the wall for a solid thirty seconds when I got to the end of that chapter.11\nHopefully learning about it is the same source of reassurance for you as it was for me. Sure, maybe that level of flakiness requires that level of brilliance to compensate for it, but at least you know now that it isn’t fatal.\nInstead, maybe it can lead to something brilliant.\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/misc/leonardo-syndrome/","summary":"Ever heard of Leonardo Syndrome?\nIf you’ve read Peter Burke’s excellent book, The Polymath,1 then you will have done, but if not: Leonardo Syndrome is where the drive to learn more and more results in beginning many projects but actually finishing few.2\nIt’s named ‘Leonardo Syndrome’ after Leonardo da Vinci himself. Despite being one of the most famous polymaths and creators in history - who doesn’t know about him?! - he was also somebody prone to failure.","tags":null,"title":"Leonardo Syndrome"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"October 6, 2022\nAndy Jiang\nFreshDeno Deploy\nIn the beginning, there was a single computer on a desk in a basement in Switzerland. It had a red-inked label:\n32 years later, there are hundreds of millions of versions of that computer all around the world. Some are even powered down by default.\nBut developing for the web still feels as if there is only one machine. We develop as if our code is going to be deployed on a single instance of a server somewhere in a huge data center in Virginia, California, or Switzerland.\nBut this doesn’t have to be the case anymore. For years, anything static was served from CDNs around the globe, close to users. Now, the same is starting to be true of dynamic web apps. You can deploy it all, everywhere.\nWhat is the edge? When people say “the edge,” they mean that your site or app is going to be hosted simultaneously on multiple servers around the globe, always close to a user. When someone requests your site/app, they will be directed to the one closest to them geographically. These distributed servers not only serve static assets, but can also execute custom code that can power a dynamic web app.\nMoving servers closer to end-users is also a physical approach towards latency optimization. This means lower latency on every single page load. The longer your pages take to load, the more likely users will bounce. 32% more likely according to Google research when load speeds go from 1 second to 3 seconds. 90% more likely when speeds go from 1 second to 5 seconds. Users will visit 9 pages when pages load in 2 seconds, but only 3 pages when they load in 7 seconds.\nThat’s the gist. Now the nuance.\nYou’ve built an app. It’s cool. It does fun things. You want to show it to the world, so you deploy it. For ease, you use Heroku. You git push heroku main and then head to myfunapp.com to check out your handiwork.\nBy default, runtimes in Heroku are deployed in the AWS data center in northern Virginia. This is great, for some people. For example, if you live mere miles from the data farmlands of upstate Virginia. Pretty much any request you make would be speedy as heck. But not everyone is lucky enough to live in the vicinity of huge beige, windowless warehouses. As it turns out, some people live in nice places.\nLet’s look at the Time To First Byte (TTFB—how quickly the server responds with the first byte of data) for an app hosted in Virginia for different locations around the world:\nLocation Heroku TTFB Frankfurt 339.95ms Amsterdam 382.62ms London 338.09ms New York 47.55ms Dallas 144.64ms San Francisco 302ms Singapore 944.14ms Sydney 889.85ms Tokyo 672.49ms Bangalore 984.39ms As they would say in Frankfurt, nicht so gut. Because every request has to travel from these locations to the eastern United States and back again, the further away a user is the longer they’re going to be waiting for their data.\nOnce you get to the other side of the world, it\u0026rsquo;s taken almost one second to get even the first byte back from the server, let alone all the data for that single page. Add in all the pages on the site a user might want to visit, and you have a very bad experience for anyone in Bangalore or Sydney (or, tbh, anyone not in the eastern United States). You are losing pageviews, losing users, and losing money.\nLet’s retry our speed check on deno.com, which is deployed on Deno Deploy, our edge network:\nLocation Heroku TTFB Deno TTFB Frankfurt 339.95ms 28.45ms Amsterdam 382.62ms 29.72ms London 338.09ms 22.3ms New York 47.55ms 41.29ms Dallas 144.64ms 29.28ms San Francisco 302ms 44.24ms Singapore 944.14ms 528.57ms Sydney 889.85ms 26.46ms Tokyo 672.49ms 19.04ms Bangalore 984.39ms 98.23ms Except Singapore, we’ve got a world of sub-100 millisecond TTFBs. This is because instead of heading off to Virginia to get the site, each of these locations can use an edge server nearest to them. The edge is about getting 50ms response times vs 150ms response times. You can test this for yourself with a VPN. If you:\ncurl -I https://deno.land You’ll get the server nearest your location:\nserver: deno/us-east4-a Using a VPN to route my request through a proxy server, We can see a response from the nearest edge server to that location. Pretending we’re in Japan gives us:\nserver: deno/asia-northeast1-a Pretending we’re in Ireland gives us:\nserver: deno/europe-west2-a And pretending we’re in Sydney, Australia gives us:\nserver: deno/australia-southeast1-b Each time the request is routed to the best option.\nThe centralized server model worked and continues to work for a lot of applications. But the scale of the web and the future of the web are fighting against this model. Let’s go through how this architecture came to be and how (and why) it’s changed over the years.\nServers as a concept were introduced in a 1969 RFC from the Network Working Group. That NeXT machine in Tim Berners-Lee’s office was the first web server, but the internet had already been rolling along for over 20 years by that point.\nThe ‘69 RFC laid out the foundation for how to transmit and receive data between a “server-host” and a user on ARPANET, the OG military-funded internet that initially connected four universities in the western US. The server was up and running by 1971 and a paper titled “A Server Host System on the ARPANET” published in 1977 by Robert Braden at UCLA (one of the connections on ARPANET) went into the details of that initial setup:\nThis paper describes the design of host software extensions which allow a large-scale machine running a widely-used operating system to provide service to the ARPANET. This software has enabled the host, an IBM 360/91 at UCLA, to provide production computing services to ARPANET users since 1971.\nThis is the first internet server: an IBM 360/91. The hardware and software have changed, and you no longer roll your own, but fundamentally this is still how the internet works today: servers providing a service.\nCaching content close to users This architecture has worked well for a long time. But by the late 90s and early 2000s, when the web started to become huge, cracks were starting to appear.\nThe first was what Akamai, when they launched the first Content Delivery Network (CDN) in 1998, called “hot spots.” Basically, servers crashing from too much traffic through popularity, or early DDoS attacks from 90s hackers.\nAkamai’s CDN cached content in a distributed system of servers. A request was routed to the nearest of these servers. However, these are limited to static files: the HTML and CSS of your site, or images, videos, or other content on it. Anything dynamic still had to be handled by your core server.\nCDNs continue to be a core piece of kit for the modern web. Most static files are cached somewhere. The first time you visit a website you might pull the HTML, CSS, or images straight from the origin server, but then they will be cached on a node close to you, so you (and others in your area of the network) will be served the cached content thereafter.\nLess servers, more serverless Servers also have problems in the opposite direction to overloading: under-utility. A server, like Tim Berners-Lee’s machine that cannot be “powered down”, has to be up 100% of the time. Even if your app gets one visit for ten seconds a day, you still pay for the other 86,390.\nServerless mitigates this problem. They can be spooled up and powered down at will. “Serverless” is a misnomer–a server is still involved. But you don’t have a dedicated server that is up all the time. Instead, the server is event-driven, only coming to life when a request is made.\nThough there were earlier versions, AWS Lambda was the first serverless framework that saw widespread use.\nThe benefits of serverless are two-fold:\nYou only pay for what you use—just those 10 seconds if that’s all that’s happening on your app. You don’t have to worry about all the DevOps side of servers. No planning, no management, no maintenance. The downsides mostly come with performance. You have a “cold start” problem with serverless functions, where the resources have to be provisioned each time, adding to latencies. And, the servers of serverless are still centralized, so you still have a long round-trip.\nSo we come to the present. Servers aren’t dying, but are far away and can fall over; CDNs cache your content close to users, but only the static stuff; and serverless means less DevOps and (potentially) lower costs, but higher latencies from cold starts.\nLivin’ on the edge The beauty of the edge is that it is taking the best part of CDNs (being close to users) and the best part of serverless (running functions) and marrying them together.\nWith the edge, you can execute custom code close to users. This has a ton of benefits.\nBetter performance This is the only thing your users care about. Does your website load fast, does it hang, is it frustrating to use?\nAs a site or app is served from an edge server near them, it’s going to be faster than if on a centralized server.\nBut the performance benefits don’t end there. As compute is performed on the edge, not by the user’s browser:\nThe app is less resource-intensive on the end user’s machine, so less use of CPU and memory and less chance of browser hangs. Smaller payloads are sent to the end user, so less bandwidth is used. As functions are run in a controlled environment, there is consistent behavior of functions and APIs. Better security Moving computation from the client/device to the serverless edge also reduces potential vectors of attack on your app. In the words of Kitson Kelly, DX Engineering Lead at Deno, “that means you immediately decrease the amount of surface area that you expose to your end users.” He says (abbreviated for clarity):\nYour device doesn’t have to make API calls to your backend services. I think all of us had to defend against that. But if you take the compute off the device and all you are sending is HTML and CSS, well, you’ve eliminated that problem. The only thing that gets off your network is the stuff you want to render to the customer.\nIn addition, DDoS attacks are more difficult. Any attacker isn’t taking down one server, they need to take down dozens, hundereds, maybe thousands across the globe. Even if they succeed in taking 10 servers offline, there might still be 20 available servers that traffic can be rerouted to.\nBetter developer experience Right now, writing code for the edge is trickier than it needs to be. For the most part, this is due to the hybrid nature of edge development. Most frameworks that implement it aren’t edge-first, so developers must pick and choose whether any given function or page is server-side rendered on the edge or rendered in the browser.\nThis makes edge development more complex. But newer frameworks, such as Fresh, which delivers zero JavaScript to the client by default, simplifies optimizing for the edge by embracing server-side rendering and islands architecture. Developers using Fresh with our globally distributed JavaScript serverless edge network, Deno Deploy, can reap the benefits of edge and latency optimization, such as achieving a perfect Lighthouse score.\nThe edge is the next iteration of the internet. From the IBM 360/91 to Berners-Lee’s NeXT machine to Akamai’s CDNs to Amazon’s data farms to serverless to the edge. Each stage has built on the last, learning lessons and fixing mistakes. The edge is the next stage of making the web a faster, more secure place for users and developers.\nDeploy to the edge globally in seconds with Fresh and Deno Deploy today.\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://4lch4.com/notes/misc/future-of-the-web/","summary":"October 6, 2022\nAndy Jiang\nFreshDeno Deploy\nIn the beginning, there was a single computer on a desk in a basement in Switzerland. It had a red-inked label:\n32 years later, there are hundreds of millions of versions of that computer all around the world. Some are even powered down by default.\nBut developing for the web still feels as if there is only one machine. We develop as if our code is going to be deployed on a single instance of a server somewhere in a huge data center in Virginia, California, or Switzerland.","tags":null,"title":"The Future of the Web is on the Edge"}]