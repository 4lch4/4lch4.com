<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NodeJS Snippets on 4lch4's Homepage</title><link>https://4lch4.com/notes/development/node/snippets/</link><description>Recent content in NodeJS Snippets on 4lch4's Homepage</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://4lch4.com/notes/development/node/snippets/index.xml" rel="self" type="application/rss+xml"/><item><title>Colorize Console Output</title><link>https://4lch4.com/notes/development/node/snippets/color-console/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://4lch4.com/notes/development/node/snippets/color-console/</guid><description>Colorize Console Output Adds special characters to text to print in color in the console (combined with console.log()).
Use template literals and special characters to add the appropriate color code to the string output. For background colors, add a special character that resets the background color at the end of the string. const colorize \= (...args) \=&amp;gt; ({ black: \`\\x1b\[30m${args.join(&amp;#39; &amp;#39;)}\`, red: \`\\x1b\[31m${args.join(&amp;#39; &amp;#39;)}\`, green: \`\\x1b\[32m${args.join(&amp;#39; &amp;#39;)}\`, yellow: \`\\x1b\[33m${args.join(&amp;#39; &amp;#39;)}\`, blue: \`\\x1b\[34m${args.</description></item><item><title>Colors.ts</title><link>https://4lch4.com/notes/development/node/snippets/colors.ts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://4lch4.com/notes/development/node/snippets/colors.ts/</guid><description>Colors.ts A helper file with a few functions to make it easier to color console output. export enum Colors { black = &amp;#39;\x1b[30m&amp;#39;, red = &amp;#39;\x1b[31m&amp;#39;, green = &amp;#39;\x1b[32m&amp;#39;, yellow = &amp;#39;\x1b[33m&amp;#39;, blue = &amp;#39;\x1b[34m&amp;#39;, magenta = &amp;#39;\x1b[35m&amp;#39;, cyan = &amp;#39;\x1b[36m&amp;#39;, white = &amp;#39;\x1b[37m&amp;#39;, bgBlack = &amp;#39;\x1b[40m&amp;#39;, bgRed = &amp;#39;\x1b[41m&amp;#39;, bgGreen = &amp;#39;\x1b[42m&amp;#39;, bgYellow = &amp;#39;\x1b[43m&amp;#39;, bgBlue = &amp;#39;\x1b[44m&amp;#39;, bgMagenta = &amp;#39;\x1b[45m&amp;#39;, bgCyan = &amp;#39;\x1b[46m&amp;#39;, bgWhite = &amp;#39;\x1b[47m&amp;#39; } export const fg = { black: (.</description></item><item><title>Create Directory if not Found</title><link>https://4lch4.com/notes/development/node/snippets/create-dir-if-not-exists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://4lch4.com/notes/development/node/snippets/create-dir-if-not-exists/</guid><description> Create Directory if not Found Creates a directory, if it does not exist.
Use fs.existsSync() to check if the directory exists, fs.mkdirSync() to create it.
const fs = require(&amp;#39;fs&amp;#39;) const createDirIfNotExists = dir =&amp;gt; !fs.existsSync(dir) ? fs.mkdirSync(dir) : undefined createDirIfNotExists(&amp;#39;test&amp;#39;) // creates the directory &amp;#39;test&amp;#39;, if it doesn&amp;#39;t exist import { existsSync, mkdirSync } from &amp;#39;fs&amp;#39; const createDirIfNotExists = (dir: string) =&amp;gt; !existsSync(dir) ? mkdirSync(dir) : undefined createDirIfNotExists(&amp;#39;test&amp;#39;) // creates the directory &amp;#39;test&amp;#39;, if it doesn&amp;#39;t exist</description></item><item><title>Get All Files</title><link>https://4lch4.com/notes/development/node/snippets/get-all-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://4lch4.com/notes/development/node/snippets/get-all-files/</guid><description>Get All Files Gets all files, directories, sub-files, and sub-directories.
I personally prefer to use fs-extra for my disk operations, but regular ol&amp;rsquo; fs works as well; you just need to change the import and refactor the async/await calls into callbacks.
With fs-extra import { readdir, stat } from &amp;#39;fs-extra&amp;#39; import { join } from &amp;#39;path&amp;#39; /** * Gets all of the files from the given directory by recursively calling itself * should one of the files be a directory.</description></item><item><title>UUID Generation</title><link>https://4lch4.com/notes/development/node/snippets/uuid-generation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://4lch4.com/notes/development/node/snippets/uuid-generation/</guid><description>UUID Generation Generates a UUID in Node.JS.
Use crypto.randomBytes() to generate a UUID, compliant with RFC4122 version 4. Use Number.prototype.toString(16) to convert it to a proper UUID. const crypto = require(&amp;#39;crypto&amp;#39;) const UUIDGeneratorNode = () =&amp;gt; ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =&amp;gt; (c ^ (crypto.randomBytes(1)[0] &amp;amp; (15 &amp;gt;&amp;gt; (c / 4)))).toString(16) ) UUIDGeneratorNode() // &amp;#39;79c7c136-60ee-40a2-beb2-856f1feabefc&amp;#39; import { randomBytes } from &amp;#39;crypto&amp;#39; const UUIDGeneratorNode = (): string =&amp;gt; ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).</description></item></channel></rss>